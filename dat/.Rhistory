# read data
dat <- read_excel("raw_data/emdat.xlsx")
# assign CHL to "keyword" to filter for  rows in Chile
keyword <- c("CHL", "PER", "COL", "ECU", "BOL", "ARG","VEN")
#make another keyword to filter for only rows about floods
key1 <- c("Flood")
# filter rows for data from Chile
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# filter rows for only data on floods
ch_dat <- ch_dat |>
filter(grepl(paste(key1, collapse = "|"), `Disaster Type`))
# minimize columns  to disaster and no. affected
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
)
keyword <- c("CHL", "PER", "COL", "ECU", "BOL", "ARG","VEN")
#make another keyword to filter for only rows about floods
key1 <- c("Flood")
# filter rows for data from Chile
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# filter rows for only data on floods
ch_dat <- ch_dat |>
filter(grepl(paste(key1, collapse = "|"), `Disaster Type`))
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
Country
)
ch_dat <- ch_dat|>
na.omit(`No. Affected`)
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# read data
dat <- read_excel("raw_data/emdat.xlsx")
# assign CHL to "keyword" to filter for  rows in Andes Region
keyword <- c("CHL", "PER", "COL", "ECU", "BOL", "ARG","VEN")
#make another keyword to filter for only rows about floods
key1 <- c("Flood")
# filter rows for data from andes region
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# filter rows for only data on floods
ch_dat <- ch_dat |>
filter(grepl(paste(key1, collapse = "|"), `Disaster Type`))
# minimize columns  to disaster and no. affected
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
Country,
`No. Homeless`
)
# remove NA values
ch_dat <- ch_dat|>
na.omit(`No. Affected`)
# assign CHL to "keyword" to filter for  rows in Andes Region
keyword <- c("CHL", "PER", "COL", "ECU", "BOL", "ARG","VEN")
#make another keyword to filter for only rows about floods
key1 <- c("Flood")
# filter rows for data from andes region
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# filter rows for only data on floods
ch_dat <- ch_dat |>
filter(grepl(paste(key1, collapse = "|"), `Disaster Type`))
# minimize columns  to disaster and no. affected
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
Country,
`No. Homeless`
)
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
Country,
)
# calling all libraries
library(tidyverse)
library(readxl)
library(ggplot2)
# read data
dat <- read_excel("raw_data/emdat.xlsx")
# assign CHL to "keyword" to filter for  rows in Andes Region
keyword <- c("CHL", "PER", "COL", "ECU", "BOL", "ARG","VEN")
#make another keyword to filter for only rows about floods
key1 <- c("Flood")
# filter rows for data from andes region
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# filter rows for only data on floods
ch_dat <- ch_dat |>
filter(grepl(paste(key1, collapse = "|"), `Disaster Type`))
# minimize columns  to disaster and no. affected
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
Country,
)
# remove NA values
ch_dat <- ch_dat|>
na.omit(`No. Affected`)
# rename start year to year
ch_dat <- ch_dat |>
rename(Year = `Start Year`)
fl_dat <- ch_dat |>
group_by(Year) %>%
mutate(TotalFloods = n())
View(fl_dat)
ch_dat <- ch_dat |>
group_by(Year) %>%
mutate(TotalFloods = n())
# calling all libraries
library(tidyverse)
library(readxl)
library(ggplot2)
# read data
dat <- read_excel("raw_data/emdat.xlsx")
# assign CHL to "keyword" to filter for  rows in Andes Region
keyword <- c("CHL", "PER", "COL", "ECU", "BOL", "ARG","VEN")
#make another keyword to filter for only rows about floods
key1 <- c("Flood")
# filter rows for data from andes region
ch_dat <- dat |>
filter(grepl(paste(keyword, collapse = "|"), ISO))
# filter rows for only data on floods
ch_dat <- ch_dat |>
filter(grepl(paste(key1, collapse = "|"), `Disaster Type`))
# minimize columns  to disaster and no. affected
ch_dat <- ch_dat |>
select(DisNo.,
`Disaster Type`,
ISO,
`Start Year`,
`No. Affected`,
Country,
)
# rename start year to year
ch_dat <- ch_dat |>
rename(Year = `Start Year`)
# remove NA values
ch_dat <- ch_dat|>
na.omit(`No. Affected`)
# create df that contains the amount of observations per year
ch_dat <- ch_dat |>
group_by(Year) %>%
mutate(TotalFloods = n())
# stacked bar chart showing number of floods over time
ggplot(ch_dat, aes(x = Year, y = TotalFloods, fill = Country)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Chart",
x = "Time",
y = "Y Axis Label") +
theme_minimal()
ggplot(ch_dat, aes(x = Year, y = TotalFloods, fill = Country)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Chart",
x = "Time",
y = "Quantity of Floods",
id = TotalFloods) +
theme_minimal()
ggplot(ch_dat, aes(x = Year, y = TotalFloods, fill = Country)) +
geom_bar(stat = "identity") +
labs(title = "Stacked Bar Chart",
x = "Time",
y = "Quantity of Floods") +
theme_minimal()
# stacked bar chart showing number of floods over time
f <- ggplot(ch_dat, aes(x = Year, y = TotalFloods, fill = Country)) +
geom_bar(stat = "identity") +
labs(title = "Quantity of Floods over time in Andean Latin America",
x = "Year",
y = "Quantity of Floods") +
theme_minimal()
# Convert ggplot object to plot_ly object
f_plotly <- ggplotly(f, tooltip = "all")
# calling all libraries
library(tidyverse)
library(readxl)
library(ggplot2)
library(plotly)
# stacked bar chart showing number of floods over time
f <- ggplot(ch_dat, aes(x = Year, y = TotalFloods, fill = Country)) +
geom_bar(stat = "identity") +
labs(title = "Quantity of Floods over time in Andean Latin America",
x = "Year",
y = "Quantity of Floods") +
theme_minimal()
# Convert ggplot object to plot_ly object
f_plotly <- ggplotly(f, tooltip = "all")
# Print the interactive plot
f_plotly
ch_dat <- ch_dat |>
group_by(`No. Affected`) %>%
mutate(AnnualAffected = n())
ch_dat <- ch_dat |>
group_by(Year) |>
mutate(SumPerYear = sum(`No.Affected`))
ch_dat <- ch_dat |>
group_by(Year) |>
mutate(SumPerYear = sum(`No. Affected`))
a <- ggplot(ch_dat, aes(x = Year, y = SumPerYear, fill = Country)) +
geom_bar(stat = "identity") +
labs(title = "Number of People Affected by Floods in Andean Latin America",
x = "Year",
y = "Number of People Affected") +
theme_minimal()
# Convert ggplot object to plot_ly object
a_plotly <- ggplotly(a, tooltip = "all")
# Print t
# Print the interactive plot
a_plotly
# Print the interactive plot
f_plotly
knitr::opts_chunk$set(echo = TRUE)
library(tigris)
nc_counties <- counties(state = "NC", cb = TRUE, year = 2010)
View(nc_counties)
View(dat)
dat <- dat |>
rename(County = NAME)
library(tidyverse)
library(readxl)
library(writexl)
library(tigris)
options(scipen = 999)
dat <- dat |>
rename(County = NAME)
dat <- dat |>
rename(`County` = NAME)
dat <- dat |>
rename(NAME = County)
year19_ct <- left_join(nc_counties,
dat,
by = "NAME")
dat <- left_join(nc_counties,
dat,
by = "NAME")
write_xlsx(dat, "cleandat.xlsx")
View(dat[[15]][[1]])
knitr::opts_chunk$set(echo = TRUE)
write.csv(dat, "cleandat.csv")
options(scipen = 999)
dat <- read_excel("geogdata.xlsx")
library(tidyverse)
library(readxl)
library(writexl)
library(tigris)
options(scipen = 999)
dat <- read_excel("geogdata.xlsx")
key <- c("NC")
dat <- dat |>
filter(grepl(paste(key, collapse = "|"), State))
dat <- dat |>
select(FIPS,
State,
County,
LACCESS_LOWI10,
LACCESS_LOWI15,
LACCESS_HHNV10,
LACCESS_HHNV15
)
dat <- dat |>
rename(NAME = County)
nc_counties <- counties(state = "NC", cb = TRUE, year = 2010)
dat <- left_join(nc_counties,
dat,
by = "NAME")
write.csv(dat, "cleandat.csv")
write.csv(dat, "cleandat.csv")
write_excel_csv(dat, "cleandat.csv")
write_xlsx(dat, "cleandat.xlsx")
st_write(dat, "cleandat.geojson")
library(sf)
st_write(dat, "cleandat.geojson")
dat <- st_set_crs(dat, 4326)
dat <- st_transform(dat, 4326)
st_write(dat, "cleandat.geojson")
knitr::opts_chunk$set(echo = TRUE)
# Read the RDS file back into R as an object
loaded_data <- readRDS("my_data.rds")
setwd("C:/Users/17049/OneDrive - University of North Carolina at Chapel Hill/Desktop/GEOG456/Final_Project/dat")
# Read the RDS file back into R as an object
loaded_data <- readRDS("my_data.rds")
library(tidyverse)
library(readxl)
library(writexl)
library(tigris)
library(sf)
options(scipen = 999)
# Read the RDS file back into R as an object
loaded_data <- readRDS("my_data.rds")
# Read the RDS file back into R as an object
loaded_data <- readRDS("data.rds")
View(loaded_data)
keyword <- c("Bars/Clubs")
loaded_data <- loaded_data |>
filter(grepl(paste(keyword, collapse = "|"), type))
# assign triangle region counties to "keyword" to filter out rows in study area
keyword <- c("Bars/Clubs")
keyword2 <- c("(L)")
# filter rows for data from the triangle
loaded_data <- loaded_data |>
filter(grepl(paste(keyword, collapse = "|"), type)) |>
filter(grepl(paste(keyword2, collapse = "|"), amenityfeatures))
loaded_data <- loaded_data |>
filter(grepl(paste(keyword, collapse = "|"), type)) |>
filter(grepl(paste(keyword2, collapse = "|"), amenityfeatures)) |>
select(-notes)
les_clean <- loaded_data |>
select(-type, amenityfeatures, ID)
View(les_clean)
les_clean <- loaded_data |>
select(-type,
-amenityfeatures,
-ID)
View(loaded_data)
install.packages("rinsta")
View(les_clean)
setwd("C:/Users/17049/OneDrive - University of North Carolina at Chapel Hill/Desktop/GEOG456/Final_Project/dat")
View(loaded_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readxl)
library(writexl)
library(tigris)
library(sf)
options(scipen = 999)
# Load your Excel file into R
excel_data <- read_excel("Wiki_LBP.xlsx")
# Write the data to a CSV file
write.csv(excel_data, file = "WIKI.csv", row.names = FALSE)
dat <- read.csv("WIKI.csv")
View(dat)
library(dplyr)
library(tidyverse)
library(readxl)
library(writexl)
library(tigris)
library(sf)
library(ggmap)
install.packages("ggmap")
library(ggmap)
library(dplyr)
# Geocode addresses
geocoded_data <- geocode(dat$streetaddress)
install.packages("tidygeocoder")
library(tidygeocoder)
# Geocode addresses
geocoded_data <- dat |>
tidygeocoder::geocode(
address = streetaddress,
method = "osm"
)
View(geocoded_data)
# Combine geocoded data with original data
geocoded_data <- cbind(les_clean, geocoded_data)
# Combine geocoded data with original data
data <- rbind(geocoded_data, les_clean)
geocoded_data <- geocoded_data |>
select(-zipcode)
# Combine geocoded data with original data
data <- rbind(geocoded_data, les_clean)
les_clean <- les_clean |>
rename(lon = long)
les_clean <- les_clean |>
rename(long = lon)
# Combine geocoded data with original data
data <- rbind(geocoded_data, les_clean)
View(dat)
combined_data <- cbind(geocoded_data, les_clean)
View(dat)
View(data)
# Combine geocoded data with original data
data <- rbind(geocoded_data, les_clean)
3990 + 1054
dat <- st_transform(dat, 4326)
st_write(dat, "clean_dat/../data.geojson")
st_write(dat, "data.geojson")
library(sf)
# Convert club data to spatial points data frame
club_coords <- st_as_sf(data, coords = c("lat", "long"), crs = 4326)
fill_address <- function(data) {
# Replace empty street addresses with city and state
data$StreetAddress[is.na(data$streetaddress) | data$streetaddress == ""] <-
paste(data$city[is.na(data$streetaddress) | data$streetaddress == ""],
data$state[is.na(data$streetaddress) | data$streetaddress == ""],
sep = ", ")
return(data)
}
# Apply the function to fill in empty street addresses
df_filled <- fill_address(df)
# Apply the function to fill in empty street addresses
df_filled <- fill_address(data)
# Apply the function to fill in empty street addresses
df_filled <- fill_address(data)
View(df_filled)
fill_address <- function(data) {
# Replace empty street addresses with city and state
data$streetaddress[is.na(data$streetaddress) | data$streetaddress == ""] <-
paste(data$city[is.na(data$streetaddress) | data$streetaddress == ""],
data$state[is.na(data$streetaddress) | data$streetaddress == ""],
sep = ", ")
return(data)
}
# Apply the function to fill in empty street addresses
df_filled <- fill_address(data)
View(df_filled)
# Geocode addresses
geocoded_data <- df_filled |>
tidygeocoder::geocode(
address = streetaddress,
method = "osm"
)
# Convert club data to spatial points data frame
club_coords <- st_as_sf(df_filled, coords = c("lat", "long"), crs = 4326)
View(geocoded_data)
# Remove rows with NA values in 'lon' and 'lat' columns
geocoded_data <- geocoded_data[complete.cases(geocoded_data$lon, geocoded_data$lat)
# Remove rows with NA values in 'lon' and 'lat' columns
geocoded_data <- geocoded_data[complete.cases(geocoded_data$lon, geocoded_data$lat)]
# Remove rows with NA values in 'lon' and 'lat' columns
geocoded_data <- geocoded_data[complete.cases(geocoded_data$lon, geocoded_data$lat)
# Remove rows with NA values in 'lon' and 'lat' columns
geocoded_data <- geocoded_data(complete.cases(geocoded_data$lon, geocoded_data$lat))
# Remove rows with NA values in 'lon' and 'lat' columns
geocoded_data <- geocoded_data[complete.cases(geocoded_data$lon, geocoded_data$lat), ]
# Remove rows with NA values in 'lon' and 'lat' columns
geocoded_data <- geocoded_data[complete.cases(geocoded_data$long, geocoded_data$lat), ]
# Remove rows with NA values in 'lon' and 'lat' columns
data <- data[complete.cases(data$long, data$lat), ]
# Convert club data to spatial points data frame
club_coords <- st_as_sf(data, coords = c("lat", "long"), crs = 4326)
# Perform spatial join between club data and state boundaries
geom_date <- st_join(club_coords, states, join = st_within)
# Perform spatial join between club data and state boundaries
geom_date <- st_join(states,club_coords, join = st_within)
View(club_coords)
st_write(dat, "club_coords.geojson")
st_write(club_coords, "club_coords.geojson")
st_write(club_coords, "clean_dat.geojson")
knitr::opts_chunk$set(echo = TRUE)
# Convert club data to spatial points data frame
club_coords <- st_as_sf(data, coords = c("long", "lat"), crs = 4326)
library(tidyverse)
library(readxl)
library(writexl)
library(tigris)
library(sf)
library(tidygeocoder)
library(dplyr)
options(scipen = 999)
# Convert club data to spatial points data frame
club_coords <- st_as_sf(data, coords = c("long", "lat"), crs = 4326)
st_write(club_coords, "clean_dat.geojson")
st_write(club_coords1, "clean_dat.geojson")
# Convert club data to spatial points data frame
club_coords1 <- st_as_sf(data, coords = c("long", "lat"), crs = 4326)
st_write(club_coords1, "clean_dat.geojson")
# Convert club data to spatial points data frame
club_coords1 <- st_as_sf(data, coords = c("long", "lat"), crs = 4326)
st_write(club_coords1, "clean_dat.geojson")
st_write(club_coords1, "clean_dat.geojson", append = FALSE)
View(club_coords)
View(club_coords1)
View(geocoded_data)
View(geocoded_data)
head(data)
head(geocoded_data)
tail(geocoded_data)
plot(club_coords1)
plot(club_coords)
class(club_coords)
head(club_coords$Shape)
head(club_coords)
head(club_coords1)
help(st_write)
write.csv(club_coords1, "clean_cord.csv")
View(data)
write.csv(data, "clean_cord.csv")
View(loaded_data)
View(club_coords1)
View(club_coords1)
View(loaded_data)
View(club_coords)
View(les_clean)
View(excel_data)
View(dat)
View(geocoded_data)
View(data)
View(loaded_data)
View(data)
